;;;; ==========================================================================
;;;; @title Ether Multisend
;;;; @author Noel Maersk <veox>

;;;; Discussion on Reddit:
;;;; https://www.reddit.com/r/ethereum/comments/7r3q71/
;;;;         incentivizing_1ton_transaction_batching_to/dsvqanj/

(seq
  (include "./common.lll.inc")

  ;; ==========================================================================
  ;; MEMORY LAYOUT

  (def '*memloc-counter* 0x60)
  (def '*memloc-to-ptr*  0x80) ; `_to[]` pointer to calldata location
  (def '*memloc-amt-ptr* 0xa0) ; `_amt[]` pointer to calldata location

  ;; ==========================================================================
  ;; CONSTANTS

  (def '*funcsel-send-many* 0x80862479) ; sendMany(address[],uint256[])
  (def '*maxgas* 30000)                 ; max gas allowed per message

  ;; ==========================================================================
  ;; INIT

  ;; none!

  ;; ==========================================================================
  ;; CODE

  (seq
    ;; FIXME: function selector useless in transient programs; remove
    ;;        and adjust calldatasize calculations

    ;; wasteful, compliant: must specify 4-byte web3 function
    (unless (= calldata-function-selector *funcsel-send-many*) (revert 0 0))
    ;; data size (sans selector) must be a multiple of 64 (32+32) bytes
    (unless (= (% (- (calldatasize) 4) 64) 0) (revert 0 0))

    ;; don't proceed if not enough data for at least one (to,amt) pair
    ;; magicnum 196: 4 + (32+32+32) + (32+32+32), where
    ;; magicnum (32+32+32): (start_ptr + size + element)
    (when (< (calldatasize) 196) (revert 0 0))

    ;; in call data, 0x04 contains pointer to `_to[]` data, where the 0th
    ;; element is its length; 0x24 contains pointer to `_amt[]` data, where
    ;; the 0th element is also its length; the lengths should be equal

    ;; store pointers to length-elements (for now)
    (mstore *memloc-to-ptr*  (+ (calldataload 0x04) 0x04))
    (mstore *memloc-amt-ptr* (+ (calldataload 0x24) 0x04))

    ;; `_to[]` and `_amt[]` lengths must match
    (unless (= (calldataload (mload *memloc-to-ptr*))
               (calldataload (mload *memloc-amt-ptr*)))
      (revert 0 0))

    ;; start from the last elements of arrays
    (mstore *memloc-counter* (calldataload (mload *memloc-to-ptr*)))

    ;; LOOP through arrays in reverse
    (while
        (mload *memloc-counter*) ;; last processed array member is not 0th
      (seq
        ;; calculate offset
        (mstore *memloc-scratchpad* (* (mload *memloc-counter*) 0x20))

        ;; FIXME: bounce failed transaction balances back
        ;; TODO: perhaps return which ones failed?
        (send *maxgas*
              ;; to
              (calldataload (+ (mload *memloc-to-ptr*)
                               (mload *memloc-scratchpad*)))
              ;; value
              (calldataload (+ (mload *memloc-amt-ptr*)
                               (mload *memloc-scratchpad*))))

        ;; decrement counter
        (mstore *memloc-counter* (- (mload *memloc-counter*) 1))))
    (return 0 0)))
