;;;; ==========================================================================
;;;; @title Ether Multisend (Transient variant)
;;;; @author Noel Maersk <veox>

;;;; In a transient program, both code and data must be passed in the same
;;;; transaction field. Although called "transaction data" when viewed
;;;; externally, it will be available as code in its entirety during execution.
;;;;
;;;; Execution starts from the beginning of this blob, so code _must_ come
;;;; first.
;;;;
;;;; Data size checks have been removed for simplicity's sake; so has been
;;;; the use of 4-byte function selectors.
;;;;
;;;; "Transaction data" is expected to look as follows:
;;;;
;;;; CODE                 | Ntgt     | <(to,amt), (to,amt), ...>
;;;; ---------------------+----------+--------------------------
;;;; (bytecodesize) bytes | 32 bytes | (32+32)*Ntgt bytes
;;;;
;;;; where:
;;;;
;;;; CODE: compiled code (below)
;;;; Ntgt: number of recipients (i.e. array size for both `_to[]` and `_amt[]`)
;;;; (to,amt): recipient address and amount (tuple)

(seq
  (include "./common.lll.inc")

  ;; ==========================================================================
  ;; MEMORY LAYOUT

  (def '*memloc-counter* 0x60)
  (def '*memloc-to*      0x80)
  (def '*memloc-amt*     0xa0)   ; code assumes `amt` immediately follows `to`!

  ;; ==========================================================================
  ;; CONSTANTS

  (def '*gaslim*         30000)  ; gas limit for each nested call

  ;; ==========================================================================
  ;; CODE

  (seq
    ;; first WORD after (bytecodesize) is number of elements - use as counter
    ;; TODO: make it something smaller than WORD?.. no need for all those 0s
    (codecopy *memloc-counter* (bytecodesize) 0x20)

    ;; LOOP through "array of tuples" in reverse
    (while
        (mload *memloc-counter*) ;; last processed array member is not 0th
      (seq
        ;; decrement counter
        (mstore *memloc-counter* (- (mload *memloc-counter*) 1))

        ;; copy (to,amt) - at the same time!
        (codecopy *memloc-to*
                  ;; offset of current (to,amt) element from start of data
                  ;; NOTE: skipping location with number of tuples
                  (+ (+ (bytecodesize) 0x20)
                     (* (mload *memloc-counter*) 0x40))
                  ;; two elements, 0x20-long each
                  0x40)

        (unless (send *gaslim* (mload *memloc-to*) (mload *memloc-amt*))
          ;; TODO: don't fail all; instead, bounce balance back
          (revert 0 0))))

    ;; TODO: return success/failure states
    (return 0 0)))
